int Contacts::add() {
    string name, nickname, nationCode, phoneNumber;
    
    cout << "Enter name: ";
    cin >> name;
    
    cout << "Enter nickname: ";
    cin >> nickname;
    
    cout << "Enter nation code: ";
    cin >> nationCode;
    
    cout << "Enter phone number: ";
    cin >> phoneNumber;
    
    Phone phone(nationCode, phoneNumber);
    Content content(name, nickname);
    
    contacts.insert({phone, content});
    
    cout << "Contact added successfully!" << endl;
    
    return 0;
}

int Contacts::search() {
    string searchKey;
    
    cout << "Enter name or phone number to search: ";
    cin >> searchKey;
    
    bool found = false;
    for (const auto& entry : contacts) {
        const Phone& phone = entry.first;
        const Content& content = entry.second;
        
        if (content.getName() == searchKey || phone.getPhoneNumber() == searchKey) {
            cout << "Contact found:" << endl;
            cout << "Name: " << content.getName() << endl;
            cout << "Nickname: " << content.getNickname() << endl;
            cout << "Phone Number: " << phone.getNationCode() << " " << phone.getPhoneNumber() << endl;
            
            found = true;
            break;
        }
    }
    
    if (!found) {
        cout << "Contact not found!" << endl;
    }
    
    return 0;
}

int Contacts::remove() {
    string searchKey;
    
    cout << "Enter name or phone number to remove: ";
    cin >> searchKey;
    
    bool removed = false;
    auto it = contacts.begin();
    while (it != contacts.end()) {
        const Phone& phone = it->first;
        const Content& content = it->second;
        
        if (content.getName() == searchKey || phone.getPhoneNumber() == searchKey) {
            it = contacts.erase(it);
            removed = true;
        } else {
            ++it;
        }
    }
    
    if (removed) {
        cout << "Contact removed successfully!" << endl;
    } else {
        cout << "Contact not found!" << endl;
    }
    
    return 0;
}

int Contacts::bookmark() {
    string searchKey;
    
    cout << "Enter name or phone number to bookmark/unbookmark: ";
    cin >> searchKey;
    
    bool found = false;
    for (auto& entry : contacts) {
        Phone& phone = entry.first;
        Content& content = entry.second;
        
        if (content.getName() == searchKey || phone.getPhoneNumber() == searchKey) {
            content.toggleBookmark();
            found = true;
            break;
        }
    }
    
    if (found) {
        cout << "Bookmark status toggled successfully!" << endl;
    } else {
        cout << "Contact not found!" << endl;
    }
    
    return 0;
}

int Contacts::finish() {
    cout << "Exiting the program..." << endl;
    
    // Perform any necessary cleanup or saving of data
    
    exit(0);  // Exit the program with status code 0
}
